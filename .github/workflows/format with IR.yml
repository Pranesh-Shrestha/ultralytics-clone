name: Ultralytics Actions with IR

on:
  issues:
    types: [opened, edited]
  discussion:
    types: [created]
  pull_request_target:
    branches: [main]
    types: [opened, closed, synchronize, review_requested]
    
env:
  API_URL: https://app.stage.veribom.com

jobs:
  create_scan_in_IR_Portal:
    runs-on: ubuntu-latest
    outputs:
      scan_id: ${{ steps.parseResponse.outputs.scan_id }}
    steps:
      - name: Initiating SBOM Scan
        id: createScan
        uses: fjogeleit/http-request-action@v1.15.1
        with:
          url: '${{env.API_URL}}/utilityapi/v1/scan'
          method: 'POST'
          data: '{"api_key": "${{secrets.VB_API_KEY_STAGE}}"}'
      - name: Parse Response
        id: parseResponse
        run: echo "scan_id=${{fromJSON(steps.createScan.outputs.response).data.scan_id}}" >> "$GITHUB_OUTPUT"

  ecr_details:
    runs-on: ubuntu-latest
    outputs:
      ecr_username: ${{steps.ecr_details.outputs.username}}
      ecr_token: ${{steps.ecr_details.outputs.token}}
      ecr_region: ${{steps.ecr_details.outputs.region}}
      ecr_id: ${{steps.ecr_details.outputs.registry_id}}
    steps:
      - name: Fetching VB Token
        id: fetchECRDetails
        uses: fjogeleit/http-request-action@v1.15.1
        with:
          url: '${{env.API_URL}}/utilityapi/v1/registry?api_key=${{secrets.VB_API_KEY_STAGE}}'
          method: 'GET'
      - name: Decode VB Token
        id: parseToken
        run: |
          echo "DECODED_TOKEN=$(echo '${{ fromJson(steps.fetchECRDetails.outputs.response).data }}' | base64 -d || echo 'Invalid Token')" >> "$GITHUB_OUTPUT"
      - name: Extract ECR Details
        id: ecr_details
        run: |
          echo "username=${{fromJSON(steps.parseToken.outputs.DECODED_TOKEN).username}}" >> "$GITHUB_OUTPUT"
          echo "token=${{fromJSON(steps.parseToken.outputs.DECODED_TOKEN).password}}" >> "$GITHUB_OUTPUT"
          echo "region=${{fromJSON(steps.parseToken.outputs.DECODED_TOKEN).region}}" >> "$GITHUB_OUTPUT"
          echo "registry_id=${{fromJSON(steps.parseToken.outputs.DECODED_TOKEN).registry_id}}" >> "$GITHUB_OUTPUT"

  start_proxy_and_build:
    runs-on: ubuntu-latest
    needs: [create_scan_in_IR_Portal, ecr_details]
    services:
      pse:
        image: 282904853176.dkr.ecr.us-west-2.amazonaws.com/invisirisk/pse-proxy:dev-test
        credentials:
          username: ${{needs.ecr_details.outputs.ecr_username}}
          password: ${{needs.ecr_details.outputs.ecr_token}}
        env:
          PSE_DEBUG_FLAG: --alsologtostderr
          POLICY_LOG: t
          INVISIRISK_JWT_TOKEN: ${{secrets.VB_API_KEY_STAGE}}
          INVISIRISK_PORTAL: https://app.stage.veribom.com/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    container:
      image: python:3.12
      options: --cap-add=NET_ADMIN --privileged
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl
      - env: 
          SCAN_ID: ${{ needs.create_scan_in_IR_Portal.outputs.scan_id }}
        run: echo $SCAN_ID
      - uses: invisirisk/pse-action@v1.0.8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          SCAN_ID: ${{ needs.create_scan_in_IR_Portal.outputs.scan_id }}
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install sudo
        run: apt-get update && apt-get install -y sudo

      - name: Fix CA Certificates
        run: |
          apt-get update && apt-get install -y ca-certificates
          update-ca-certificates
          export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
          export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
          echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          echo "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
      
      - name: Set SSL Environment Variables
        run: |
          echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          echo "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          
      - name: Install UV Package Manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install UV Package Manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Dependencies with Native TLS
        run: |
          uv pip install --system --native-tls ultralytics-actions codespell tomli || \
          uv pip install --system ultralytics-actions codespell tomli

          
      - name: Run Ultralytics Formatting
        uses: ultralytics/actions@eb1201bd933b9f6096c64525ccaee3684c91bf14
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: true
          python: true
          prettier: true
          spelling: true
          links: false
          summary: true
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Install Python dependencies
        run: pip install --ignore-installed -r requirements.txt || true
